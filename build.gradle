plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'eclipse'
//    id 'checkstyle'
}

// Don't need these tasks, so disabling them. Makes it possible to avoid
// declaring a single application main class.
startScripts.enabled = false
run.enabled = false

// Also don't need the regular application distribution packages since
// this is just a set of samples. So disabling to make the build output
// cleaner
distTar.enabled=false
distZip.enabled=false

//applicationName = 'sol-new-java-samples'
//version = ''

jar {
    archiveBaseName = 'solace-samples-java'
    archiveVersion = ''
    manifest {
        attributes 'Implementation-Title': 'Solace Java Getting Started Samples',
                   'Implementation-Version': ''
    }
}

// Download context sensitive help and/or source code for eclipse and idea
eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
    jdt {
        //if you want to alter the java versions (by default they are configured with gradle java plugin settings):
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // Solace Messaging API for Java Dependencies
    implementation group: 'com.solace', name: 'solace-messaging-client', version: '1.0.0'

    // new an improved logging framework, no more slf4j
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-jcl', version: '2.17.1'
}


sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'src/dist/config'
       }
   }
}

//checkstyle {
//    configFile file('config/checkstyle/checkstyle.xml');
//    toolVersion '8.27';
//}


tasks.withType(JavaCompile).all {
    options.compilerArgs.add("-Xlint:all")
}

def scripts = [
    'HelloWorld':'com.solace.samples.java.HelloWorld',
    'DirectPublisher':'com.solace.samples.java.patterns.DirectPublisher',
    'DirectSubscriber':'com.solace.samples.java.patterns.DirectSubscriber',
    'DirectProcessor':'com.solace.samples.java.patterns.DirectProcessor'
]
scripts.each() { scriptName, className ->
    def t = tasks.create(name: scriptName+'StartScript', type: CreateStartScripts) {
        mainClassName = className
        applicationName = scriptName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtimeClasspath
        classpath += files('src/dist/config')  // this is where our log4j2.xml file will be
        doLast {  // necessary since Gradle assumes all classpath are under 'lib', need to modify
          def windowsScriptFile = file getWindowsScript()
          def unixScriptFile = file getUnixScript()
          windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\config', '%APP_HOME%\\config')
          unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/config', '$APP_HOME/config')
        }
        defaultJvmOpts = ['-ea']
    }
    applicationDistribution.into("bin") {
        from(t)
        fileMode = 0755
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
    //createAllStartScripts.dependsOn(t)
}

installDist {
    destinationDir = new File(project.buildDir, 'staged')
}

assemble.dependsOn installDist
